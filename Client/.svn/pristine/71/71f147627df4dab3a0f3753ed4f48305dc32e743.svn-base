// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUI_Tester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Let's see how this works. Attempt to test the contents of the CellNameTextBox, and the CellValueTextBox.
        /// </summary>
        public void FirstCodedUI_Test()
        {

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.FirstCodedUI_TestParams.ExePath, this.FirstCodedUI_TestParams.AlternateExePath);
        }
        
        /// <summary>
        /// AssertCellValueTextBox00 - Use 'AssertCellValueTextBox00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValueTextBox00()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.AssertCellValueTextBox00ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell Name is incorrect");
        }
        
        /// <summary>
        /// AssertCellValueTextBox01 - Use 'AssertCellValueTextBox01ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValueTextBox01()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellValueTextBox01ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Emty Cell\'s Value is not an empty string");
        }
        
        /// <summary>
        /// Contents must be empty string.
        /// </summary>
        public void AssertCellContentsTextBox00()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellContentsTextBox00ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Empty Cell\'s Contents is not any empty string.");
        }
        
        /// <summary>
        /// Test for cell selection clearing the contents text box.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinControl uIItemDocument = this.UICS3500F13Lab7TestingWindow.UIItemWindow.UIItemDocument;
            WinClient uICS3500F13Lab7TestingClient1 = this.UICS3500F13Lab7TestingWindow.UICS3500F13Lab7TestingClient.UICS3500F13Lab7TestingClient1;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UISpreadsheetWindowExePath, this.RecordedMethod2Params.UISpreadsheetWindowAlternateExePath);

            // Type 'asdf' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod2Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod2Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in document
            Keyboard.SendKeys(uIItemDocument, this.RecordedMethod2Params.UIItemDocumentSendKeys, ModifierKeys.None);

            // Click 'CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome' client
            Mouse.Click(uICS3500F13Lab7TestingClient1, new Point(1348, 10));
        }
        
        /// <summary>
        /// Assert ContentsTextBox contains the correct text.
        /// </summary>
        public void AssertContentsTextBox00()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals 'asdf'
            Assert.AreEqual(this.AssertContentsTextBox00ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "ContentsTextBox has wrong text.");
        }
        
        /// <summary>
        /// Change the current panel selection in the SS.
        /// </summary>
        public void RecordedChangeCellSelectionMethod00()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(392, 140));
        }
        
        /// <summary>
        /// AssertCorrectCellNameDisplay00 - Use 'AssertCorrectCellNameDisplay00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCorrectCellNameDisplay00()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'E6'
            Assert.AreEqual(this.AssertCorrectCellNameDisplay00ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "CellNameTextBox is displaying incorrect panel name.");
        }
        
        /// <summary>
        /// AssertCellContentsTextBoxIsCleared00 - Use 'AssertCellContentsTextBoxIsCleared00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellContentsTextBoxIsCleared00()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellContentsTextBoxIsCleared00ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Selecting a differnt panel is not clearing the ContentsTextBox.");
        }
        
        /// <summary>
        /// Check to see if selecting another panel clears the ContentsTextBox.
        /// </summary>
        public void ChangeCellSelectionMethod00()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 9));
        }
        
        /// <summary>
        /// First test of cell value field without evaluation implementation.
        /// </summary>
        public void CellValueFiledTest00()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.CellValueFiledTest00Params.UISpreadsheetWindowExePath, this.CellValueFiledTest00Params.UISpreadsheetWindowAlternateExePath);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(459, 192));

            // Type 'sd' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.CellValueFiledTest00Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.CellValueFiledTest00Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// First test
        /// </summary>
        public void AssertCellValue00()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
            Assert.AreEqual(this.AssertCellValue00ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Cell value is not being displayed");
        }
        
        /// <summary>
        /// check empty value
        /// </summary>
        public void CellValueFieldTest01()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(308, 276));
        }
        
        /// <summary>
        /// AssertEmptyCellValue00 - Use 'AssertEmptyCellValue00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEmptyCellValue00()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertEmptyCellValue00ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Empty cell value not being displayed");
        }
        
        /// <summary>
        /// Check again
        /// </summary>
        public void CellValueFieldTest02()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(460, 198));
        }
        
        /// <summary>
        /// CellValueFieldTest03 - Use 'CellValueFieldTest03ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CellValueFieldTest03()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
            Assert.AreEqual(this.CellValueFieldTest03ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value not being redisplayed");
        }
        
        /// <summary>
        /// TestCellValueField00 - Use 'TestCellValueField00Params' to pass parameters into this method.
        /// </summary>
        public void TestCellValueField00()
        {
            #region Variable Declarations
            WinClient uICS3500F13Lab7TestingClient1 = this.UICS3500F13Lab7TestingWindow.UICS3500F13Lab7TestingClient.UICS3500F13Lab7TestingClient1;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestCellValueField00Params.UISpreadsheetWindowExePath, this.TestCellValueField00Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(327, 111));

            // Type 'lk' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.TestCellValueField00Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.TestCellValueField00Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertValueBox00 - Use 'AssertValueBox00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertValueBox00()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
            Assert.AreEqual(this.AssertValueBox00ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value box not displaying correctly");
        }
        
        /// <summary>
        /// CellValueFieldTest04
        /// </summary>
        public void CellValueFieldTest04()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(308, 300));
        }
        
        /// <summary>
        /// AssertCellValue01 - Use 'AssertCellValue01ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValue01()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellValue01ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Empty string not displayed in value field.");
        }
        
        /// <summary>
        /// CellValueFieldTest05
        /// </summary>
        public void CellValueFieldTest05()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(314, 120));
        }
        
        /// <summary>
        /// CellValueFieldTest06 - Use 'CellValueFieldTest06ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CellValueFieldTest06()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
            Assert.AreEqual(this.CellValueFieldTest06ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value field not correctly displayed");
        }
        
        /// <summary>
        /// Last, close window
        /// </summary>
        public void CellValueFieldTest07()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 11));
        }
        
        #region Properties
        public virtual FirstCodedUI_TestParams FirstCodedUI_TestParams
        {
            get
            {
                if ((this.mFirstCodedUI_TestParams == null))
                {
                    this.mFirstCodedUI_TestParams = new FirstCodedUI_TestParams();
                }
                return this.mFirstCodedUI_TestParams;
            }
        }
        
        public virtual AssertCellValueTextBox00ExpectedValues AssertCellValueTextBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValueTextBox00ExpectedValues == null))
                {
                    this.mAssertCellValueTextBox00ExpectedValues = new AssertCellValueTextBox00ExpectedValues();
                }
                return this.mAssertCellValueTextBox00ExpectedValues;
            }
        }
        
        public virtual AssertCellValueTextBox01ExpectedValues AssertCellValueTextBox01ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValueTextBox01ExpectedValues == null))
                {
                    this.mAssertCellValueTextBox01ExpectedValues = new AssertCellValueTextBox01ExpectedValues();
                }
                return this.mAssertCellValueTextBox01ExpectedValues;
            }
        }
        
        public virtual AssertCellContentsTextBox00ExpectedValues AssertCellContentsTextBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellContentsTextBox00ExpectedValues == null))
                {
                    this.mAssertCellContentsTextBox00ExpectedValues = new AssertCellContentsTextBox00ExpectedValues();
                }
                return this.mAssertCellContentsTextBox00ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertContentsTextBox00ExpectedValues AssertContentsTextBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertContentsTextBox00ExpectedValues == null))
                {
                    this.mAssertContentsTextBox00ExpectedValues = new AssertContentsTextBox00ExpectedValues();
                }
                return this.mAssertContentsTextBox00ExpectedValues;
            }
        }
        
        public virtual AssertCorrectCellNameDisplay00ExpectedValues AssertCorrectCellNameDisplay00ExpectedValues
        {
            get
            {
                if ((this.mAssertCorrectCellNameDisplay00ExpectedValues == null))
                {
                    this.mAssertCorrectCellNameDisplay00ExpectedValues = new AssertCorrectCellNameDisplay00ExpectedValues();
                }
                return this.mAssertCorrectCellNameDisplay00ExpectedValues;
            }
        }
        
        public virtual AssertCellContentsTextBoxIsCleared00ExpectedValues AssertCellContentsTextBoxIsCleared00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellContentsTextBoxIsCleared00ExpectedValues == null))
                {
                    this.mAssertCellContentsTextBoxIsCleared00ExpectedValues = new AssertCellContentsTextBoxIsCleared00ExpectedValues();
                }
                return this.mAssertCellContentsTextBoxIsCleared00ExpectedValues;
            }
        }
        
        public virtual CellValueFiledTest00Params CellValueFiledTest00Params
        {
            get
            {
                if ((this.mCellValueFiledTest00Params == null))
                {
                    this.mCellValueFiledTest00Params = new CellValueFiledTest00Params();
                }
                return this.mCellValueFiledTest00Params;
            }
        }
        
        public virtual AssertCellValue00ExpectedValues AssertCellValue00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValue00ExpectedValues == null))
                {
                    this.mAssertCellValue00ExpectedValues = new AssertCellValue00ExpectedValues();
                }
                return this.mAssertCellValue00ExpectedValues;
            }
        }
        
        public virtual AssertEmptyCellValue00ExpectedValues AssertEmptyCellValue00ExpectedValues
        {
            get
            {
                if ((this.mAssertEmptyCellValue00ExpectedValues == null))
                {
                    this.mAssertEmptyCellValue00ExpectedValues = new AssertEmptyCellValue00ExpectedValues();
                }
                return this.mAssertEmptyCellValue00ExpectedValues;
            }
        }
        
        public virtual CellValueFieldTest03ExpectedValues CellValueFieldTest03ExpectedValues
        {
            get
            {
                if ((this.mCellValueFieldTest03ExpectedValues == null))
                {
                    this.mCellValueFieldTest03ExpectedValues = new CellValueFieldTest03ExpectedValues();
                }
                return this.mCellValueFieldTest03ExpectedValues;
            }
        }
        
        public virtual TestCellValueField00Params TestCellValueField00Params
        {
            get
            {
                if ((this.mTestCellValueField00Params == null))
                {
                    this.mTestCellValueField00Params = new TestCellValueField00Params();
                }
                return this.mTestCellValueField00Params;
            }
        }
        
        public virtual AssertValueBox00ExpectedValues AssertValueBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertValueBox00ExpectedValues == null))
                {
                    this.mAssertValueBox00ExpectedValues = new AssertValueBox00ExpectedValues();
                }
                return this.mAssertValueBox00ExpectedValues;
            }
        }
        
        public virtual AssertCellValue01ExpectedValues AssertCellValue01ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValue01ExpectedValues == null))
                {
                    this.mAssertCellValue01ExpectedValues = new AssertCellValue01ExpectedValues();
                }
                return this.mAssertCellValue01ExpectedValues;
            }
        }
        
        public virtual CellValueFieldTest06ExpectedValues CellValueFieldTest06ExpectedValues
        {
            get
            {
                if ((this.mCellValueFieldTest06ExpectedValues == null))
                {
                    this.mCellValueFieldTest06ExpectedValues = new CellValueFieldTest06ExpectedValues();
                }
                return this.mCellValueFieldTest06ExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UICS3500F13Lab7TestingWindow UICS3500F13Lab7TestingWindow
        {
            get
            {
                if ((this.mUICS3500F13Lab7TestingWindow == null))
                {
                    this.mUICS3500F13Lab7TestingWindow = new UICS3500F13Lab7TestingWindow();
                }
                return this.mUICS3500F13Lab7TestingWindow;
            }
        }
        #endregion
        
        #region Fields
        private FirstCodedUI_TestParams mFirstCodedUI_TestParams;
        
        private AssertCellValueTextBox00ExpectedValues mAssertCellValueTextBox00ExpectedValues;
        
        private AssertCellValueTextBox01ExpectedValues mAssertCellValueTextBox01ExpectedValues;
        
        private AssertCellContentsTextBox00ExpectedValues mAssertCellContentsTextBox00ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertContentsTextBox00ExpectedValues mAssertContentsTextBox00ExpectedValues;
        
        private AssertCorrectCellNameDisplay00ExpectedValues mAssertCorrectCellNameDisplay00ExpectedValues;
        
        private AssertCellContentsTextBoxIsCleared00ExpectedValues mAssertCellContentsTextBoxIsCleared00ExpectedValues;
        
        private CellValueFiledTest00Params mCellValueFiledTest00Params;
        
        private AssertCellValue00ExpectedValues mAssertCellValue00ExpectedValues;
        
        private AssertEmptyCellValue00ExpectedValues mAssertEmptyCellValue00ExpectedValues;
        
        private CellValueFieldTest03ExpectedValues mCellValueFieldTest03ExpectedValues;
        
        private TestCellValueField00Params mTestCellValueField00Params;
        
        private AssertValueBox00ExpectedValues mAssertValueBox00ExpectedValues;
        
        private AssertCellValue01ExpectedValues mAssertCellValue01ExpectedValues;
        
        private CellValueFieldTest06ExpectedValues mCellValueFieldTest06ExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UICS3500F13Lab7TestingWindow mUICS3500F13Lab7TestingWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FirstCodedUI_Test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class FirstCodedUI_TestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValueTextBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValueTextBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValueTextBox01'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValueTextBox01ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellContentsTextBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellContentsTextBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'asdf' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "asdf";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in document
        /// </summary>
        public string UIItemDocumentSendKeys = "{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertContentsTextBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertContentsTextBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals 'asdf'
        /// </summary>
        public string UICellContentsTextBoxEditText = "asdf";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCorrectCellNameDisplay00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCorrectCellNameDisplay00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'E6'
        /// </summary>
        public string UICellNameTextBoxEditText = "E6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellContentsTextBoxIsCleared00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellContentsTextBoxIsCleared00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueFiledTest00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CellValueFiledTest00Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sd' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "sd";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValue00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValue00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
        /// </summary>
        public string UICellValueTextBoxEditText = "sd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEmptyCellValue00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertEmptyCellValue00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueFieldTest03'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CellValueFieldTest03ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
        /// </summary>
        public string UICellValueTextBoxEditText = "sd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestCellValueField00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestCellValueField00Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'lk' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "lk";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValueBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertValueBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
        /// </summary>
        public string UICellValueTextBoxEditText = "lk";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValue01'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValue01ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueFieldTest06'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CellValueFieldTest06ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
        /// </summary>
        public string UICellValueTextBoxEditText = "lk";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UICellContentsTextBoxWindow UICellContentsTextBoxWindow
        {
            get
            {
                if ((this.mUICellContentsTextBoxWindow == null))
                {
                    this.mUICellContentsTextBoxWindow = new UICellContentsTextBoxWindow(this);
                }
                return this.mUICellContentsTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window mUIA1Window;
        
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UICellContentsTextBoxWindow mUICellContentsTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameTextBoxEdit
        {
            get
            {
                if ((this.mUICellNameTextBoxEdit == null))
                {
                    this.mUICellNameTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Name";
                    this.mUICellNameTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValueTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICellContentsTextBoxWindow : WinWindow
    {
        
        public UICellContentsTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentsTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsTextBoxEdit
        {
            get
            {
                if ((this.mUICellContentsTextBoxEdit == null))
                {
                    this.mUICellContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents";
                    this.mUICellContentsTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICS3500F13Lab7TestingWindow : WinWindow
    {
        
        public UICS3500F13Lab7TestingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICS3500F13Lab7TestingClient UICS3500F13Lab7TestingClient
        {
            get
            {
                if ((this.mUICS3500F13Lab7TestingClient == null))
                {
                    this.mUICS3500F13Lab7TestingClient = new UICS3500F13Lab7TestingClient(this);
                }
                return this.mUICS3500F13Lab7TestingClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UICS3500F13Lab7TestingClient mUICS3500F13Lab7TestingClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "176987648";
            this.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDocument
        {
            get
            {
                if ((this.mUIItemDocument == null))
                {
                    this.mUIItemDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIItemDocument.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
                    #endregion
                }
                return this.mUIItemDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICS3500F13Lab7TestingClient : WinClient
    {
        
        public UICS3500F13Lab7TestingClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinClient UICS3500F13Lab7TestingClient1
        {
            get
            {
                if ((this.mUICS3500F13Lab7TestingClient1 == null))
                {
                    this.mUICS3500F13Lab7TestingClient1 = new WinClient(this);
                    #region Search Criteria
                    this.mUICS3500F13Lab7TestingClient1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUICS3500F13Lab7TestingClient1.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
                    #endregion
                }
                return this.mUICS3500F13Lab7TestingClient1;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICS3500F13Lab7TestingClient1;
        #endregion
    }
}
