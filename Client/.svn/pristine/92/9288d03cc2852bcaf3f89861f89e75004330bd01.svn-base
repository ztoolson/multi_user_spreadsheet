// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUI_Tester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Let's see how this works. Attempt to test the contents of the CellNameTextBox, and the CellValueTextBox.
        /// </summary>
        public void FirstCodedUI_Test()
        {

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.FirstCodedUI_TestParams.ExePath, this.FirstCodedUI_TestParams.AlternateExePath);
        }
        
        /// <summary>
        /// AssertCellValueTextBox00 - Use 'AssertCellValueTextBox00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValueTextBox00()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.AssertCellValueTextBox00ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Cell Name is incorrect");
        }
        
        /// <summary>
        /// AssertCellValueTextBox01 - Use 'AssertCellValueTextBox01ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValueTextBox01()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellValueTextBox01ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Emty Cell\'s Value is not an empty string");
        }
        
        /// <summary>
        /// Contents must be empty string.
        /// </summary>
        public void AssertCellContentsTextBox00()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellContentsTextBox00ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Empty Cell\'s Contents is not any empty string.");
        }
        
        /// <summary>
        /// Test for cell selection clearing the contents text box.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinControl uIItemDocument = this.UICS3500F13Lab7TestingWindow.UIItemWindow.UIItemDocument;
            WinClient uICS3500F13Lab7TestingClient1 = this.UICS3500F13Lab7TestingWindow.UICS3500F13Lab7TestingClient.UICS3500F13Lab7TestingClient1;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod2Params.UISpreadsheetWindowExePath, this.RecordedMethod2Params.UISpreadsheetWindowAlternateExePath);

            // Type 'asdf' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod2Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod2Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in document
            Keyboard.SendKeys(uIItemDocument, this.RecordedMethod2Params.UIItemDocumentSendKeys, ModifierKeys.None);

            // Click 'CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome' client
            Mouse.Click(uICS3500F13Lab7TestingClient1, new Point(1348, 10));
        }
        
        /// <summary>
        /// Assert ContentsTextBox contains the correct text.
        /// </summary>
        public void AssertContentsTextBox00()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals 'asdf'
            Assert.AreEqual(this.AssertContentsTextBox00ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "ContentsTextBox has wrong text.");
        }
        
        /// <summary>
        /// Change the current panel selection in the SS.
        /// </summary>
        public void RecordedChangeCellSelectionMethod00()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(392, 140));
        }
        
        /// <summary>
        /// AssertCorrectCellNameDisplay00 - Use 'AssertCorrectCellNameDisplay00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCorrectCellNameDisplay00()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'E6'
            Assert.AreEqual(this.AssertCorrectCellNameDisplay00ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "CellNameTextBox is displaying incorrect panel name.");
        }
        
        /// <summary>
        /// AssertCellContentsTextBoxIsCleared00 - Use 'AssertCellContentsTextBoxIsCleared00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellContentsTextBoxIsCleared00()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellContentsTextBoxIsCleared00ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Selecting a differnt panel is not clearing the ContentsTextBox.");
        }
        
        /// <summary>
        /// Check to see if selecting another panel clears the ContentsTextBox.
        /// </summary>
        public void ChangeCellSelectionMethod00()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 9));
        }
        
        /// <summary>
        /// First test of cell value field without evaluation implementation.
        /// </summary>
        public void CellValueFiledTest00()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.CellValueFiledTest00Params.UISpreadsheetWindowExePath, this.CellValueFiledTest00Params.UISpreadsheetWindowAlternateExePath);

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(26, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(459, 192));

            // Type 'sd' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.CellValueFiledTest00Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.CellValueFiledTest00Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// First test
        /// </summary>
        public void AssertCellValue00()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
            Assert.AreEqual(this.AssertCellValue00ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Cell value is not being displayed");
        }
        
        /// <summary>
        /// check empty value
        /// </summary>
        public void CellValueFieldTest01()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(308, 276));
        }
        
        /// <summary>
        /// AssertEmptyCellValue00 - Use 'AssertEmptyCellValue00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEmptyCellValue00()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertEmptyCellValue00ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Empty cell value not being displayed");
        }
        
        /// <summary>
        /// Check again
        /// </summary>
        public void CellValueFieldTest02()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(460, 198));
        }
        
        /// <summary>
        /// CellValueFieldTest03 - Use 'CellValueFieldTest03ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CellValueFieldTest03()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
            Assert.AreEqual(this.CellValueFieldTest03ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value not being redisplayed");
        }
        
        /// <summary>
        /// TestCellValueField00 - Use 'TestCellValueField00Params' to pass parameters into this method.
        /// </summary>
        public void TestCellValueField00()
        {
            #region Variable Declarations
            WinClient uICS3500F13Lab7TestingClient1 = this.UICS3500F13Lab7TestingWindow.UICS3500F13Lab7TestingClient.UICS3500F13Lab7TestingClient1;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome' client
            Mouse.Click(uICS3500F13Lab7TestingClient1, new Point(1343, 5));

            // Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestCellValueField00Params.UISpreadsheetWindowExePath, this.TestCellValueField00Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(327, 111));

            // Type 'lk' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.TestCellValueField00Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.TestCellValueField00Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertValueBox00 - Use 'AssertValueBox00ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertValueBox00()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
            Assert.AreEqual(this.AssertValueBox00ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value box not displaying correctly");
        }
        
        /// <summary>
        /// CellValueFieldTest04
        /// </summary>
        public void CellValueFieldTest04()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(308, 300));
        }
        
        /// <summary>
        /// AssertCellValue01 - Use 'AssertCellValue01ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCellValue01()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertCellValue01ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Empty string not displayed in value field.");
        }
        
        /// <summary>
        /// CellValueFieldTest05
        /// </summary>
        public void CellValueFieldTest05()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(314, 120));
        }
        
        /// <summary>
        /// CellValueFieldTest06 - Use 'CellValueFieldTest06ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CellValueFieldTest06()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
            Assert.AreEqual(this.CellValueFieldTest06ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Value field not correctly displayed");
        }
        
        /// <summary>
        /// Last, close window
        /// </summary>
        public void CellValueFieldTest07()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 11));
        }
        
        /// <summary>
        /// baisic test for dependencies.
        /// </summary>
        public void TestDependencyTest1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestDependencyTest1Params.UISpreadsheetWindowExePath, this.TestDependencyTest1Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 39));

            // Type '1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.TestDependencyTest1Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.TestDependencyTest1Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// A1Assert - Use 'A1AssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void A1Assert()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
            Assert.AreEqual(this.A1AssertExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Incorrect value");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '1'
            Assert.AreEqual(this.A1AssertExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong contents");
        }
        
        /// <summary>
        /// b1
        /// </summary>
        public void TestDependencies2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(172, 40));

            // Type '=a1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.TestDependencies2Params.UICellContentsTextBoxEditText;

            // Type '=A1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.TestDependencies2Params.UICellContentsTextBoxEditText1;
        }
        
        /// <summary>
        /// b1: =A1 = 1
        /// </summary>
        public void Assertb1()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'B1'
            Assert.AreEqual(this.Assertb1ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "wrong cell name");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
            Assert.AreEqual(this.Assertb1ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "wrong cell value");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
            Assert.AreEqual(this.Assertb1ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "wrong contents");
        }
        
        /// <summary>
        /// c1
        /// </summary>
        public void Dependencies3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(227, 42));

            // Type '=A1+B1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies3Params.UICellContentsTextBoxEditText;
        }
        
        /// <summary>
        /// c1 =A1+B1=2
        /// </summary>
        public void AssertC1()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'C1'
            Assert.AreEqual(this.AssertC1ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "cell name not c1");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
            Assert.AreEqual(this.AssertC1ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "c1 does not equal 2");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1'
            Assert.AreEqual(this.AssertC1ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "wrong contents for c1");
        }
        
        /// <summary>
        /// D1 = A1+B1+C1 = 4
        /// </summary>
        public void Dependencies4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(308, 41));

            // Type '=A1+B1+C1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies4Params.UICellContentsTextBoxEditText;
        }
        
        /// <summary>
        /// D1 =A1+B1+C1 = 4
        /// </summary>
        public void AssertD1()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'D1'
            Assert.AreEqual(this.AssertD1ExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "wrong cell name, should be D1");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '4'
            Assert.AreEqual(this.AssertD1ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Wrong value for D1");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
            Assert.AreEqual(this.AssertD1ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong contents for D1");
        }
        
        /// <summary>
        /// Change A1 to "=2"
        /// </summary>
        public void Dependencies5()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 38));

            // Type '=2' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies5Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.Dependencies5Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// A1 changed from 1 to =2
        /// </summary>
        public void AssertA1_again()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
            Assert.AreEqual(this.AssertA1_againExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "wrong value for A1 after first change to =2");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=2'
            Assert.AreEqual(this.AssertA1_againExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong contents for A1 after first change to =2");
        }
        
        /// <summary>
        /// B1 after A1 changed to =2
        /// </summary>
        public void Dependencies6()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(161, 45));
        }
        
        /// <summary>
        /// B1 after A1 changed to =2
        /// </summary>
        public void AssertB1_again()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'B1'
            Assert.AreEqual(this.AssertB1_againExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Wrong cell name for B1");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
            Assert.AreEqual(this.AssertB1_againExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Wrong value for B1 after A1 changed to =2");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
            Assert.AreEqual(this.AssertB1_againExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Contents changed for B1, when it shoudl not have");
        }
        
        /// <summary>
        /// C4 after a1 changed to =2
        /// </summary>
        public void Dependencies7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(226, 40));
        }
        
        /// <summary>
        /// C1 after A1 changed to =2
        /// </summary>
        public void AssertC1_again()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '4'
            Assert.AreEqual(this.AssertC1_againExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "wrong value for C1 after change to A1");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1'
            Assert.AreEqual(this.AssertC1_againExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Contents for C1 changed");
        }
        
        /// <summary>
        /// D1 after a1 changed to =2
        /// </summary>
        public void Dependencies8()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(311, 45));
        }
        
        /// <summary>
        /// D1 =A1+B1+C1 = 8
        /// </summary>
        public void AssertD1_again()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '8'
            Assert.AreEqual(this.AssertD1_againExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "D1 wrong value after A1 changed to =2");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
            Assert.AreEqual(this.AssertD1_againExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "D1 contents changed when it should not have");
        }
        
        /// <summary>
        /// change A1 to 3
        /// </summary>
        public void Dependencies9()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 39));

            // Type '3' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies9Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.Dependencies9Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// A1: 3
        /// </summary>
        public void AssertA1_final()
        {
            #region Variable Declarations
            WinEdit uICellNameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UICellNameTextBoxEdit;
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
            Assert.AreEqual(this.AssertA1_finalExpectedValues.UICellNameTextBoxEditText, uICellNameTextBoxEdit.Text, "Wrong cell name displayed for A1");

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '3'
            Assert.AreEqual(this.AssertA1_finalExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Wrong value displayed for A1 after changed to 3");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '3'
            Assert.AreEqual(this.AssertA1_finalExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong contents for A1 after changed to double 3.");
        }
        
        /// <summary>
        /// Dependencies10 - Use 'Dependencies10Params' to pass parameters into this method.
        /// </summary>
        public void Dependencies10()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.Dependencies10Params.UISpreadsheetWindowExePath, this.Dependencies10Params.UISpreadsheetWindowAlternateExePath);

            // Type '' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies10Params.UICellContentsTextBoxEditText;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(157, 37));

            // Type '=A1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies10Params.UICellContentsTextBoxEditText1;
        }
        
        /// <summary>
        /// B1: =A1 = 3
        /// </summary>
        public void AssertB1_Final()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '3'
            Assert.AreEqual(this.AssertB1_FinalExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "B1 wrong value after A1 changed to 3");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
            Assert.AreEqual(this.AssertB1_FinalExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong cntents for b1");
        }
        
        /// <summary>
        /// Dependencies11 - Use 'Dependencies11Params' to pass parameters into this method.
        /// </summary>
        public void Dependencies11()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(75, 45));

            // Type '=2' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.Dependencies11Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.Dependencies11Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// C1: = A1+B1 = 6
        /// </summary>
        public void AssertC1_final()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '6'
            Assert.AreEqual(this.AssertC1_finalExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Wrong value for C1 after A1 change to 3");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1'
            Assert.AreEqual(this.AssertC1_finalExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong contents for C1");
        }
        
        /// <summary>
        /// Assert D1 after A1 changed to 3
        /// </summary>
        public void Dependencies12()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(310, 39));
        }
        
        /// <summary>
        /// D1: =A1+B1+C1 = 12
        /// </summary>
        public void AssertD1_Final()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '12'
            Assert.AreEqual(this.AssertD1_FinalExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "Wrong value for D1");

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
            Assert.AreEqual(this.AssertD1_FinalExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text);

            // Verify that the 'SelectionText' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
            Assert.AreEqual(this.AssertD1_FinalExpectedValues.UICellContentsTextBoxEditSelectionText, uICellContentsTextBoxEdit.SelectionText, "Wrong Contents for D1");

            // Verify that the 'ControlType' property of 'CellContentsTextBox' text box equals 'Edit'
            Assert.AreEqual(this.AssertD1_FinalExpectedValues.UICellContentsTextBoxEditControlType, uICellContentsTextBoxEdit.ControlType.ToString(), "Wrong contents for D1");
        }
        
        /// <summary>
        /// DoneWithDependencies1
        /// </summary>
        public void DoneWithDependencies1()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISaveBeforeClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(62, 15));
        }
        
        /// <summary>
        /// Assert B1's Value dependency
        /// </summary>
        public void Assertb1Value()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
            Assert.AreEqual(this.Assertb1ValueExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "B1 = A2 = 1");
        }
        
        /// <summary>
        /// blah
        /// </summary>
        public void AssertB1_Contents()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
            Assert.AreEqual(this.AssertB1_ContentsExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "Wrong contents for B1");
        }
        
        /// <summary>
        /// =2
        /// </summary>
        public void Value()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
            Assert.AreEqual(this.ValueExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "wrong value for A1 after change");
        }
        
        /// <summary>
        /// =2
        /// </summary>
        public void AssertA1ChangedContents()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=2'
            Assert.AreEqual(this.AssertA1ChangedContentsExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "=2 is a formula");
        }
        
        /// <summary>
        /// I hate testing this way...
        /// </summary>
        public void Dependencies20()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(153, 41));
        }
        
        /// <summary>
        /// =2
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "=2");
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellContentsTextBoxEditText, uICellContentsTextBoxEdit.Text, "asdf");
        }
        
        /// <summary>
        /// a1 = 1; b1 =a1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UISpreadsheetWindowExePath, this.RecordedMethod1Params.UISpreadsheetWindowAlternateExePath);

            // Type '1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod1Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod1Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(167, 40));

            // Type '=A1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod1Params.UICellContentsTextBoxEditText1;
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text, "b1 eqauls a1 value");
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(80, 38));

            // Type '2' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod3Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod3Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(160, 34));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod5
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISaveBeforeClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(15, 13));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentsTextBoxEdit = this.UISpreadsheetWindow.UICellContentsTextBoxWindow.UICellContentsTextBoxEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod6Params.UISpreadsheetWindowExePath, this.RecordedMethod6Params.UISpreadsheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 38));

            // Type '1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod6Params.UICellContentsTextBoxEditText;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod6Params.UICellContentsTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(133, 45));

            // Type '=A1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod6Params.UICellContentsTextBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(74, 42));

            // Type '2' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod6Params.UICellContentsTextBoxEditText2;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod6Params.UICellContentsTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(247, 45));

            // Type '=A1+B1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod6Params.UICellContentsTextBoxEditText3;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(307, 45));

            // Type '=A1+B1+C1' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod6Params.UICellContentsTextBoxEditText4;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 35));

            // Type '3' in 'CellContentsTextBox' text box
            uICellContentsTextBoxEdit.Text = this.RecordedMethod6Params.UICellContentsTextBoxEditText5;

            // Type '{Enter}' in 'CellContentsTextBox' text box
            Keyboard.SendKeys(uICellContentsTextBoxEdit, this.RecordedMethod6Params.UICellContentsTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(289, 34));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinEdit uICellValueTextBoxEdit = this.UISpreadsheetWindow.UICellValueTextBoxWindow.UICellValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValueTextBox' text box equals '12'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UICellValueTextBoxEditText, uICellValueTextBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod7
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISaveBeforeClosingWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(13, 1));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(44, 9));
        }
        
        #region Properties
        public virtual FirstCodedUI_TestParams FirstCodedUI_TestParams
        {
            get
            {
                if ((this.mFirstCodedUI_TestParams == null))
                {
                    this.mFirstCodedUI_TestParams = new FirstCodedUI_TestParams();
                }
                return this.mFirstCodedUI_TestParams;
            }
        }
        
        public virtual AssertCellValueTextBox00ExpectedValues AssertCellValueTextBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValueTextBox00ExpectedValues == null))
                {
                    this.mAssertCellValueTextBox00ExpectedValues = new AssertCellValueTextBox00ExpectedValues();
                }
                return this.mAssertCellValueTextBox00ExpectedValues;
            }
        }
        
        public virtual AssertCellValueTextBox01ExpectedValues AssertCellValueTextBox01ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValueTextBox01ExpectedValues == null))
                {
                    this.mAssertCellValueTextBox01ExpectedValues = new AssertCellValueTextBox01ExpectedValues();
                }
                return this.mAssertCellValueTextBox01ExpectedValues;
            }
        }
        
        public virtual AssertCellContentsTextBox00ExpectedValues AssertCellContentsTextBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellContentsTextBox00ExpectedValues == null))
                {
                    this.mAssertCellContentsTextBox00ExpectedValues = new AssertCellContentsTextBox00ExpectedValues();
                }
                return this.mAssertCellContentsTextBox00ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertContentsTextBox00ExpectedValues AssertContentsTextBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertContentsTextBox00ExpectedValues == null))
                {
                    this.mAssertContentsTextBox00ExpectedValues = new AssertContentsTextBox00ExpectedValues();
                }
                return this.mAssertContentsTextBox00ExpectedValues;
            }
        }
        
        public virtual AssertCorrectCellNameDisplay00ExpectedValues AssertCorrectCellNameDisplay00ExpectedValues
        {
            get
            {
                if ((this.mAssertCorrectCellNameDisplay00ExpectedValues == null))
                {
                    this.mAssertCorrectCellNameDisplay00ExpectedValues = new AssertCorrectCellNameDisplay00ExpectedValues();
                }
                return this.mAssertCorrectCellNameDisplay00ExpectedValues;
            }
        }
        
        public virtual AssertCellContentsTextBoxIsCleared00ExpectedValues AssertCellContentsTextBoxIsCleared00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellContentsTextBoxIsCleared00ExpectedValues == null))
                {
                    this.mAssertCellContentsTextBoxIsCleared00ExpectedValues = new AssertCellContentsTextBoxIsCleared00ExpectedValues();
                }
                return this.mAssertCellContentsTextBoxIsCleared00ExpectedValues;
            }
        }
        
        public virtual CellValueFiledTest00Params CellValueFiledTest00Params
        {
            get
            {
                if ((this.mCellValueFiledTest00Params == null))
                {
                    this.mCellValueFiledTest00Params = new CellValueFiledTest00Params();
                }
                return this.mCellValueFiledTest00Params;
            }
        }
        
        public virtual AssertCellValue00ExpectedValues AssertCellValue00ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValue00ExpectedValues == null))
                {
                    this.mAssertCellValue00ExpectedValues = new AssertCellValue00ExpectedValues();
                }
                return this.mAssertCellValue00ExpectedValues;
            }
        }
        
        public virtual AssertEmptyCellValue00ExpectedValues AssertEmptyCellValue00ExpectedValues
        {
            get
            {
                if ((this.mAssertEmptyCellValue00ExpectedValues == null))
                {
                    this.mAssertEmptyCellValue00ExpectedValues = new AssertEmptyCellValue00ExpectedValues();
                }
                return this.mAssertEmptyCellValue00ExpectedValues;
            }
        }
        
        public virtual CellValueFieldTest03ExpectedValues CellValueFieldTest03ExpectedValues
        {
            get
            {
                if ((this.mCellValueFieldTest03ExpectedValues == null))
                {
                    this.mCellValueFieldTest03ExpectedValues = new CellValueFieldTest03ExpectedValues();
                }
                return this.mCellValueFieldTest03ExpectedValues;
            }
        }
        
        public virtual TestCellValueField00Params TestCellValueField00Params
        {
            get
            {
                if ((this.mTestCellValueField00Params == null))
                {
                    this.mTestCellValueField00Params = new TestCellValueField00Params();
                }
                return this.mTestCellValueField00Params;
            }
        }
        
        public virtual AssertValueBox00ExpectedValues AssertValueBox00ExpectedValues
        {
            get
            {
                if ((this.mAssertValueBox00ExpectedValues == null))
                {
                    this.mAssertValueBox00ExpectedValues = new AssertValueBox00ExpectedValues();
                }
                return this.mAssertValueBox00ExpectedValues;
            }
        }
        
        public virtual AssertCellValue01ExpectedValues AssertCellValue01ExpectedValues
        {
            get
            {
                if ((this.mAssertCellValue01ExpectedValues == null))
                {
                    this.mAssertCellValue01ExpectedValues = new AssertCellValue01ExpectedValues();
                }
                return this.mAssertCellValue01ExpectedValues;
            }
        }
        
        public virtual CellValueFieldTest06ExpectedValues CellValueFieldTest06ExpectedValues
        {
            get
            {
                if ((this.mCellValueFieldTest06ExpectedValues == null))
                {
                    this.mCellValueFieldTest06ExpectedValues = new CellValueFieldTest06ExpectedValues();
                }
                return this.mCellValueFieldTest06ExpectedValues;
            }
        }
        
        public virtual TestDependencyTest1Params TestDependencyTest1Params
        {
            get
            {
                if ((this.mTestDependencyTest1Params == null))
                {
                    this.mTestDependencyTest1Params = new TestDependencyTest1Params();
                }
                return this.mTestDependencyTest1Params;
            }
        }
        
        public virtual A1AssertExpectedValues A1AssertExpectedValues
        {
            get
            {
                if ((this.mA1AssertExpectedValues == null))
                {
                    this.mA1AssertExpectedValues = new A1AssertExpectedValues();
                }
                return this.mA1AssertExpectedValues;
            }
        }
        
        public virtual TestDependencies2Params TestDependencies2Params
        {
            get
            {
                if ((this.mTestDependencies2Params == null))
                {
                    this.mTestDependencies2Params = new TestDependencies2Params();
                }
                return this.mTestDependencies2Params;
            }
        }
        
        public virtual Assertb1ExpectedValues Assertb1ExpectedValues
        {
            get
            {
                if ((this.mAssertb1ExpectedValues == null))
                {
                    this.mAssertb1ExpectedValues = new Assertb1ExpectedValues();
                }
                return this.mAssertb1ExpectedValues;
            }
        }
        
        public virtual Dependencies3Params Dependencies3Params
        {
            get
            {
                if ((this.mDependencies3Params == null))
                {
                    this.mDependencies3Params = new Dependencies3Params();
                }
                return this.mDependencies3Params;
            }
        }
        
        public virtual AssertC1ExpectedValues AssertC1ExpectedValues
        {
            get
            {
                if ((this.mAssertC1ExpectedValues == null))
                {
                    this.mAssertC1ExpectedValues = new AssertC1ExpectedValues();
                }
                return this.mAssertC1ExpectedValues;
            }
        }
        
        public virtual Dependencies4Params Dependencies4Params
        {
            get
            {
                if ((this.mDependencies4Params == null))
                {
                    this.mDependencies4Params = new Dependencies4Params();
                }
                return this.mDependencies4Params;
            }
        }
        
        public virtual AssertD1ExpectedValues AssertD1ExpectedValues
        {
            get
            {
                if ((this.mAssertD1ExpectedValues == null))
                {
                    this.mAssertD1ExpectedValues = new AssertD1ExpectedValues();
                }
                return this.mAssertD1ExpectedValues;
            }
        }
        
        public virtual Dependencies5Params Dependencies5Params
        {
            get
            {
                if ((this.mDependencies5Params == null))
                {
                    this.mDependencies5Params = new Dependencies5Params();
                }
                return this.mDependencies5Params;
            }
        }
        
        public virtual AssertA1_againExpectedValues AssertA1_againExpectedValues
        {
            get
            {
                if ((this.mAssertA1_againExpectedValues == null))
                {
                    this.mAssertA1_againExpectedValues = new AssertA1_againExpectedValues();
                }
                return this.mAssertA1_againExpectedValues;
            }
        }
        
        public virtual AssertB1_againExpectedValues AssertB1_againExpectedValues
        {
            get
            {
                if ((this.mAssertB1_againExpectedValues == null))
                {
                    this.mAssertB1_againExpectedValues = new AssertB1_againExpectedValues();
                }
                return this.mAssertB1_againExpectedValues;
            }
        }
        
        public virtual AssertC1_againExpectedValues AssertC1_againExpectedValues
        {
            get
            {
                if ((this.mAssertC1_againExpectedValues == null))
                {
                    this.mAssertC1_againExpectedValues = new AssertC1_againExpectedValues();
                }
                return this.mAssertC1_againExpectedValues;
            }
        }
        
        public virtual AssertD1_againExpectedValues AssertD1_againExpectedValues
        {
            get
            {
                if ((this.mAssertD1_againExpectedValues == null))
                {
                    this.mAssertD1_againExpectedValues = new AssertD1_againExpectedValues();
                }
                return this.mAssertD1_againExpectedValues;
            }
        }
        
        public virtual Dependencies9Params Dependencies9Params
        {
            get
            {
                if ((this.mDependencies9Params == null))
                {
                    this.mDependencies9Params = new Dependencies9Params();
                }
                return this.mDependencies9Params;
            }
        }
        
        public virtual AssertA1_finalExpectedValues AssertA1_finalExpectedValues
        {
            get
            {
                if ((this.mAssertA1_finalExpectedValues == null))
                {
                    this.mAssertA1_finalExpectedValues = new AssertA1_finalExpectedValues();
                }
                return this.mAssertA1_finalExpectedValues;
            }
        }
        
        public virtual Dependencies10Params Dependencies10Params
        {
            get
            {
                if ((this.mDependencies10Params == null))
                {
                    this.mDependencies10Params = new Dependencies10Params();
                }
                return this.mDependencies10Params;
            }
        }
        
        public virtual AssertB1_FinalExpectedValues AssertB1_FinalExpectedValues
        {
            get
            {
                if ((this.mAssertB1_FinalExpectedValues == null))
                {
                    this.mAssertB1_FinalExpectedValues = new AssertB1_FinalExpectedValues();
                }
                return this.mAssertB1_FinalExpectedValues;
            }
        }
        
        public virtual Dependencies11Params Dependencies11Params
        {
            get
            {
                if ((this.mDependencies11Params == null))
                {
                    this.mDependencies11Params = new Dependencies11Params();
                }
                return this.mDependencies11Params;
            }
        }
        
        public virtual AssertC1_finalExpectedValues AssertC1_finalExpectedValues
        {
            get
            {
                if ((this.mAssertC1_finalExpectedValues == null))
                {
                    this.mAssertC1_finalExpectedValues = new AssertC1_finalExpectedValues();
                }
                return this.mAssertC1_finalExpectedValues;
            }
        }
        
        public virtual AssertD1_FinalExpectedValues AssertD1_FinalExpectedValues
        {
            get
            {
                if ((this.mAssertD1_FinalExpectedValues == null))
                {
                    this.mAssertD1_FinalExpectedValues = new AssertD1_FinalExpectedValues();
                }
                return this.mAssertD1_FinalExpectedValues;
            }
        }
        
        public virtual Assertb1ValueExpectedValues Assertb1ValueExpectedValues
        {
            get
            {
                if ((this.mAssertb1ValueExpectedValues == null))
                {
                    this.mAssertb1ValueExpectedValues = new Assertb1ValueExpectedValues();
                }
                return this.mAssertb1ValueExpectedValues;
            }
        }
        
        public virtual AssertB1_ContentsExpectedValues AssertB1_ContentsExpectedValues
        {
            get
            {
                if ((this.mAssertB1_ContentsExpectedValues == null))
                {
                    this.mAssertB1_ContentsExpectedValues = new AssertB1_ContentsExpectedValues();
                }
                return this.mAssertB1_ContentsExpectedValues;
            }
        }
        
        public virtual ValueExpectedValues ValueExpectedValues
        {
            get
            {
                if ((this.mValueExpectedValues == null))
                {
                    this.mValueExpectedValues = new ValueExpectedValues();
                }
                return this.mValueExpectedValues;
            }
        }
        
        public virtual AssertA1ChangedContentsExpectedValues AssertA1ChangedContentsExpectedValues
        {
            get
            {
                if ((this.mAssertA1ChangedContentsExpectedValues == null))
                {
                    this.mAssertA1ChangedContentsExpectedValues = new AssertA1ChangedContentsExpectedValues();
                }
                return this.mAssertA1ChangedContentsExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UICS3500F13Lab7TestingWindow UICS3500F13Lab7TestingWindow
        {
            get
            {
                if ((this.mUICS3500F13Lab7TestingWindow == null))
                {
                    this.mUICS3500F13Lab7TestingWindow = new UICS3500F13Lab7TestingWindow();
                }
                return this.mUICS3500F13Lab7TestingWindow;
            }
        }
        
        public UISaveBeforeClosingWindow UISaveBeforeClosingWindow
        {
            get
            {
                if ((this.mUISaveBeforeClosingWindow == null))
                {
                    this.mUISaveBeforeClosingWindow = new UISaveBeforeClosingWindow();
                }
                return this.mUISaveBeforeClosingWindow;
            }
        }
        #endregion
        
        #region Fields
        private FirstCodedUI_TestParams mFirstCodedUI_TestParams;
        
        private AssertCellValueTextBox00ExpectedValues mAssertCellValueTextBox00ExpectedValues;
        
        private AssertCellValueTextBox01ExpectedValues mAssertCellValueTextBox01ExpectedValues;
        
        private AssertCellContentsTextBox00ExpectedValues mAssertCellContentsTextBox00ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertContentsTextBox00ExpectedValues mAssertContentsTextBox00ExpectedValues;
        
        private AssertCorrectCellNameDisplay00ExpectedValues mAssertCorrectCellNameDisplay00ExpectedValues;
        
        private AssertCellContentsTextBoxIsCleared00ExpectedValues mAssertCellContentsTextBoxIsCleared00ExpectedValues;
        
        private CellValueFiledTest00Params mCellValueFiledTest00Params;
        
        private AssertCellValue00ExpectedValues mAssertCellValue00ExpectedValues;
        
        private AssertEmptyCellValue00ExpectedValues mAssertEmptyCellValue00ExpectedValues;
        
        private CellValueFieldTest03ExpectedValues mCellValueFieldTest03ExpectedValues;
        
        private TestCellValueField00Params mTestCellValueField00Params;
        
        private AssertValueBox00ExpectedValues mAssertValueBox00ExpectedValues;
        
        private AssertCellValue01ExpectedValues mAssertCellValue01ExpectedValues;
        
        private CellValueFieldTest06ExpectedValues mCellValueFieldTest06ExpectedValues;
        
        private TestDependencyTest1Params mTestDependencyTest1Params;
        
        private A1AssertExpectedValues mA1AssertExpectedValues;
        
        private TestDependencies2Params mTestDependencies2Params;
        
        private Assertb1ExpectedValues mAssertb1ExpectedValues;
        
        private Dependencies3Params mDependencies3Params;
        
        private AssertC1ExpectedValues mAssertC1ExpectedValues;
        
        private Dependencies4Params mDependencies4Params;
        
        private AssertD1ExpectedValues mAssertD1ExpectedValues;
        
        private Dependencies5Params mDependencies5Params;
        
        private AssertA1_againExpectedValues mAssertA1_againExpectedValues;
        
        private AssertB1_againExpectedValues mAssertB1_againExpectedValues;
        
        private AssertC1_againExpectedValues mAssertC1_againExpectedValues;
        
        private AssertD1_againExpectedValues mAssertD1_againExpectedValues;
        
        private Dependencies9Params mDependencies9Params;
        
        private AssertA1_finalExpectedValues mAssertA1_finalExpectedValues;
        
        private Dependencies10Params mDependencies10Params;
        
        private AssertB1_FinalExpectedValues mAssertB1_FinalExpectedValues;
        
        private Dependencies11Params mDependencies11Params;
        
        private AssertC1_finalExpectedValues mAssertC1_finalExpectedValues;
        
        private AssertD1_FinalExpectedValues mAssertD1_FinalExpectedValues;
        
        private Assertb1ValueExpectedValues mAssertb1ValueExpectedValues;
        
        private AssertB1_ContentsExpectedValues mAssertB1_ContentsExpectedValues;
        
        private ValueExpectedValues mValueExpectedValues;
        
        private AssertA1ChangedContentsExpectedValues mAssertA1ChangedContentsExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UICS3500F13Lab7TestingWindow mUICS3500F13Lab7TestingWindow;
        
        private UISaveBeforeClosingWindow mUISaveBeforeClosingWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FirstCodedUI_Test'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class FirstCodedUI_TestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValueTextBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValueTextBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValueTextBox01'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValueTextBox01ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellContentsTextBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellContentsTextBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'asdf' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "asdf";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}' in document
        /// </summary>
        public string UIItemDocumentSendKeys = "{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertContentsTextBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertContentsTextBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals 'asdf'
        /// </summary>
        public string UICellContentsTextBoxEditText = "asdf";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCorrectCellNameDisplay00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCorrectCellNameDisplay00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'E6'
        /// </summary>
        public string UICellNameTextBoxEditText = "E6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellContentsTextBoxIsCleared00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellContentsTextBoxIsCleared00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals ''
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueFiledTest00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CellValueFiledTest00Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sd' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "sd";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValue00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValue00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
        /// </summary>
        public string UICellValueTextBoxEditText = "sd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEmptyCellValue00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertEmptyCellValue00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueFieldTest03'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CellValueFieldTest03ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'sd'
        /// </summary>
        public string UICellValueTextBoxEditText = "sd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestCellValueField00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestCellValueField00Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS5(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS5(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'lk' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "lk";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertValueBox00'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertValueBox00ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
        /// </summary>
        public string UICellValueTextBoxEditText = "lk";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCellValue01'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertCellValue01ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals ''
        /// </summary>
        public string UICellValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CellValueFieldTest06'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class CellValueFieldTest06ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals 'lk'
        /// </summary>
        public string UICellValueTextBoxEditText = "lk";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestDependencyTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestDependencyTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'A1Assert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class A1AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
        /// </summary>
        public string UICellValueTextBoxEditText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestDependencies2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class TestDependencies2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=a1";
        
        /// <summary>
        /// Type '=A1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText1 = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assertb1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Assertb1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'B1'
        /// </summary>
        public string UICellNameTextBoxEditText = "B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
        /// </summary>
        public string UICellValueTextBoxEditText = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Dependencies3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1+B1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertC1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertC1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'C1'
        /// </summary>
        public string UICellNameTextBoxEditText = "C1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Dependencies4Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1+B1+C1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1+C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertD1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertD1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'D1'
        /// </summary>
        public string UICellNameTextBoxEditText = "D1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '4'
        /// </summary>
        public string UICellValueTextBoxEditText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1+C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Dependencies5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=2' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1_again'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertA1_againExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=2'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertB1_again'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertB1_againExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'B1'
        /// </summary>
        public string UICellNameTextBoxEditText = "B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertC1_again'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertC1_againExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '4'
        /// </summary>
        public string UICellValueTextBoxEditText = "4";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertD1_again'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertD1_againExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '8'
        /// </summary>
        public string UICellValueTextBoxEditText = "8";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1+C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Dependencies9Params
    {
        
        #region Fields
        /// <summary>
        /// Type '3' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1_final'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertA1_finalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellNameTextBox' text box equals 'A1'
        /// </summary>
        public string UICellNameTextBoxEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '3'
        /// </summary>
        public string UICellValueTextBoxEditText = "3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '3'
        /// </summary>
        public string UICellContentsTextBoxEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Dependencies10Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "";
        
        /// <summary>
        /// Type '=A1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText1 = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertB1_Final'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertB1_FinalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '3'
        /// </summary>
        public string UICellValueTextBoxEditText = "3";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Dependencies11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Dependencies11Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=2' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "=2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertC1_final'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertC1_finalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '6'
        /// </summary>
        public string UICellValueTextBoxEditText = "6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertD1_Final'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertD1_FinalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '12'
        /// </summary>
        public string UICellValueTextBoxEditText = "12";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1+B1+C1";
        
        /// <summary>
        /// Verify that the 'SelectionText' property of 'CellContentsTextBox' text box equals '=A1+B1+C1'
        /// </summary>
        public string UICellContentsTextBoxEditSelectionText = "=A1+B1+C1";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'CellContentsTextBox' text box equals 'Edit'
        /// </summary>
        public string UICellContentsTextBoxEditControlType = "Edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assertb1Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class Assertb1ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
        /// </summary>
        public string UICellValueTextBoxEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertB1_Contents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertB1_ContentsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertA1ChangedContents'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertA1ChangedContentsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=2'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellContentsTextBox' text box equals '=A1'
        /// </summary>
        public string UICellContentsTextBoxEditText = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText1 = "=A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '1'
        /// </summary>
        public string UICellValueTextBoxEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '2'
        /// </summary>
        public string UICellValueTextBoxEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\budge\\Documents\\Visual Studio 2012\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6(1)\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6(1)\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText1 = "=A1";
        
        /// <summary>
        /// Type '2' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText2 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText3 = "=A1+B1";
        
        /// <summary>
        /// Type '=A1+B1+C1' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText4 = "=A1+B1+C1";
        
        /// <summary>
        /// Type '3' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditText5 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'CellContentsTextBox' text box
        /// </summary>
        public string UICellContentsTextBoxEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValueTextBox' text box equals '12'
        /// </summary>
        public string UICellValueTextBoxEditText = "12";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UICellValueTextBoxWindow UICellValueTextBoxWindow
        {
            get
            {
                if ((this.mUICellValueTextBoxWindow == null))
                {
                    this.mUICellValueTextBoxWindow = new UICellValueTextBoxWindow(this);
                }
                return this.mUICellValueTextBoxWindow;
            }
        }
        
        public UICellContentsTextBoxWindow UICellContentsTextBoxWindow
        {
            get
            {
                if ((this.mUICellContentsTextBoxWindow == null))
                {
                    this.mUICellContentsTextBoxWindow = new UICellContentsTextBoxWindow(this);
                }
                return this.mUICellContentsTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIA1Window mUIA1Window;
        
        private UICellValueTextBoxWindow mUICellValueTextBoxWindow;
        
        private UICellContentsTextBoxWindow mUICellContentsTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameTextBoxEdit
        {
            get
            {
                if ((this.mUICellNameTextBoxEdit == null))
                {
                    this.mUICellNameTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell Name";
                    this.mUICellNameTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellNameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICellValueTextBoxWindow : WinWindow
    {
        
        public UICellValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValueTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueTextBoxEdit
        {
            get
            {
                if ((this.mUICellValueTextBoxEdit == null))
                {
                    this.mUICellValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUICellValueTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICellContentsTextBoxWindow : WinWindow
    {
        
        public UICellContentsTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContentsTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsTextBoxEdit
        {
            get
            {
                if ((this.mUICellContentsTextBoxEdit == null))
                {
                    this.mUICellContentsTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsTextBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Contents";
                    this.mUICellContentsTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICellContentsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICS3500F13Lab7TestingWindow : WinWindow
    {
        
        public UICS3500F13Lab7TestingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Chrome_WidgetWin_1";
            this.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICS3500F13Lab7TestingClient UICS3500F13Lab7TestingClient
        {
            get
            {
                if ((this.mUICS3500F13Lab7TestingClient == null))
                {
                    this.mUICS3500F13Lab7TestingClient = new UICS3500F13Lab7TestingClient(this);
                }
                return this.mUICS3500F13Lab7TestingClient;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UICS3500F13Lab7TestingClient mUICS3500F13Lab7TestingClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "176987648";
            this.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDocument
        {
            get
            {
                if ((this.mUIItemDocument == null))
                {
                    this.mUIItemDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUIItemDocument.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
                    #endregion
                }
                return this.mUIItemDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICS3500F13Lab7TestingClient : WinClient
    {
        
        public UICS3500F13Lab7TestingClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
            #endregion
        }
        
        #region Properties
        public WinClient UICS3500F13Lab7TestingClient1
        {
            get
            {
                if ((this.mUICS3500F13Lab7TestingClient1 == null))
                {
                    this.mUICS3500F13Lab7TestingClient1 = new WinClient(this);
                    #region Search Criteria
                    this.mUICS3500F13Lab7TestingClient1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUICS3500F13Lab7TestingClient1.WindowTitles.Add("CS 3500-F13: Lab 7 - Testing GUIs - Google Chrome");
                    #endregion
                }
                return this.mUICS3500F13Lab7TestingClient1;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUICS3500F13Lab7TestingClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISaveBeforeClosingWindow : WinWindow
    {
        
        public UISaveBeforeClosingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Before Closing?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Before Closing?");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Save Before Closing?");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Save Before Closing?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
